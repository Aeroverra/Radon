package me.itzsomebody.radon.methods;

import me.itzsomebody.radon.asm.Label;
import me.itzsomebody.radon.asm.Opcodes;
import me.itzsomebody.radon.asm.tree.MethodNode;
import me.itzsomebody.radon.transformers.stringencryption.*;

/**
 * That returns methods needed to produce a {@link String} for the appropriate StringEncryption transformer.
 *
 * @author ItzSomebody
 * @author ASMifier by OW2
 */
public class StringEncryption implements Opcodes {
    /**
     * Returns a {@link MethodNode} that returns a {@link String} needed to decrypt strings encrypted by {@link LightStringEncryption}.
     *
     * @param decryptMethodName used to determine the name of the generated {@link MethodNode}.
     * @return a {@link MethodNode} that returns a {@link String} needed to decrypt strings encrypted by {@link LightStringEncryption}.
     */
    public static MethodNode lightMethod(String decryptMethodName) {
        MethodNode method = new MethodNode(ACC_PUBLIC + ACC_STATIC + ACC_SYNTHETIC + ACC_BRIDGE, decryptMethodName, "(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;", null, null);
        method.visitCode();
        Label l0 = new Label();
        Label l1 = new Label();
        Label l2 = new Label();
        method.visitTryCatchBlock(l0, l1, l2, "java/lang/Throwable");
        method.visitLabel(l0);
        method.visitIntInsn(BIPUSH, 15);
        method.visitIntInsn(NEWARRAY, T_INT);
        method.visitInsn(DUP);
        method.visitInsn(ICONST_0);
        Label l3 = new Label();
        method.visitLabel(l3);
        method.visitIntInsn(SIPUSH, 9833);
        method.visitInsn(IASTORE);
        method.visitInsn(DUP);
        method.visitInsn(ICONST_1);
        Label l4 = new Label();
        method.visitLabel(l4);
        method.visitIntInsn(SIPUSH, 9834);
        method.visitInsn(IASTORE);
        method.visitInsn(DUP);
        method.visitInsn(ICONST_2);
        Label l5 = new Label();
        method.visitLabel(l5);
        method.visitIntInsn(SIPUSH, 9835);
        method.visitInsn(IASTORE);
        method.visitInsn(DUP);
        method.visitInsn(ICONST_3);
        Label l6 = new Label();
        method.visitLabel(l6);
        method.visitIntInsn(SIPUSH, 9836);
        method.visitInsn(IASTORE);
        method.visitInsn(DUP);
        method.visitInsn(ICONST_4);
        Label l7 = new Label();
        method.visitLabel(l7);
        method.visitIntInsn(SIPUSH, 9200);
        method.visitInsn(IASTORE);
        method.visitInsn(DUP);
        method.visitInsn(ICONST_5);
        Label l8 = new Label();
        method.visitLabel(l8);
        method.visitIntInsn(SIPUSH, 8987);
        method.visitInsn(IASTORE);
        method.visitInsn(DUP);
        method.visitIntInsn(BIPUSH, 6);
        Label l9 = new Label();
        method.visitLabel(l9);
        method.visitIntInsn(SIPUSH, 9201);
        method.visitInsn(IASTORE);
        method.visitInsn(DUP);
        method.visitIntInsn(BIPUSH, 7);
        Label l10 = new Label();
        method.visitLabel(l10);
        method.visitIntInsn(SIPUSH, 9203);
        method.visitInsn(IASTORE);
        method.visitInsn(DUP);
        method.visitIntInsn(BIPUSH, 8);
        Label l11 = new Label();
        method.visitLabel(l11);
        method.visitIntInsn(SIPUSH, 14898);
        method.visitInsn(IASTORE);
        method.visitInsn(DUP);
        method.visitIntInsn(BIPUSH, 9);
        Label l12 = new Label();
        method.visitLabel(l12);
        method.visitIntInsn(SIPUSH, 16086);
        method.visitInsn(IASTORE);
        method.visitInsn(DUP);
        method.visitIntInsn(BIPUSH, 10);
        Label l13 = new Label();
        method.visitLabel(l13);
        method.visitIntInsn(SIPUSH, 8721);
        method.visitInsn(IASTORE);
        method.visitInsn(DUP);
        method.visitIntInsn(BIPUSH, 11);
        Label l14 = new Label();
        method.visitLabel(l14);
        method.visitIntInsn(SIPUSH, 8747);
        method.visitInsn(IASTORE);
        method.visitInsn(DUP);
        method.visitIntInsn(BIPUSH, 12);
        Label l15 = new Label();
        method.visitLabel(l15);
        method.visitIntInsn(SIPUSH, 5072);
        method.visitInsn(IASTORE);
        method.visitInsn(DUP);
        method.visitIntInsn(BIPUSH, 13);
        Label l16 = new Label();
        method.visitLabel(l16);
        method.visitIntInsn(SIPUSH, 9986);
        method.visitInsn(IASTORE);
        method.visitInsn(DUP);
        method.visitIntInsn(BIPUSH, 14);
        Label l17 = new Label();
        method.visitLabel(l17);
        method.visitIntInsn(SIPUSH, 9993);
        method.visitInsn(IASTORE);
        Label l18 = new Label();
        method.visitLabel(l18);
        method.visitVarInsn(ASTORE, 2);
        Label l19 = new Label();
        method.visitLabel(l19);
        method.visitVarInsn(ALOAD, 0);
        method.visitMethodInsn(INVOKEVIRTUAL, "java/lang/String", "toCharArray", "()[C", false);
        method.visitVarInsn(ASTORE, 3);
        Label l20 = new Label();
        method.visitLabel(l20);
        method.visitVarInsn(ALOAD, 1);
        method.visitMethodInsn(INVOKEVIRTUAL, "java/lang/String", "toCharArray", "()[C", false);
        method.visitVarInsn(ASTORE, 4);
        Label l21 = new Label();
        method.visitLabel(l21);
        method.visitVarInsn(ALOAD, 3);
        method.visitInsn(ARRAYLENGTH);
        method.visitIntInsn(SIPUSH, 256);
        method.visitInsn(ISHL);
        method.visitIntInsn(NEWARRAY, T_CHAR);
        method.visitVarInsn(ASTORE, 5);
        Label l22 = new Label();
        method.visitLabel(l22);
        method.visitInsn(ICONST_0);
        method.visitVarInsn(ISTORE, 6);
        Label l23 = new Label();
        method.visitLabel(l23);
        Label l24 = new Label();
        method.visitJumpInsn(GOTO, l24);
        Label l25 = new Label();
        method.visitLabel(l25);
        method.visitFrame(Opcodes.F_FULL, 7, new Object[]{"java/lang/String", "java/lang/String", "[I", "[C", "[C", "[C", Opcodes.INTEGER}, 0, new Object[]{});
        method.visitVarInsn(ALOAD, 5);
        method.visitVarInsn(ILOAD, 6);
        method.visitIntInsn(SIPUSH, 256);
        method.visitInsn(ISHL);
        method.visitVarInsn(ALOAD, 3);
        method.visitVarInsn(ILOAD, 6);
        method.visitIntInsn(SIPUSH, 256);
        method.visitInsn(ISHL);
        method.visitInsn(CALOAD);
        method.visitVarInsn(ALOAD, 2);
        method.visitVarInsn(ILOAD, 6);
        method.visitIntInsn(SIPUSH, 256);
        method.visitInsn(ISHL);
        method.visitVarInsn(ALOAD, 2);
        method.visitInsn(ARRAYLENGTH);
        method.visitIntInsn(SIPUSH, 256);
        method.visitInsn(ISHL);
        method.visitInsn(IREM);
        method.visitInsn(IALOAD);
        method.visitInsn(I2C);
        method.visitInsn(IXOR);
        method.visitInsn(I2C);
        method.visitInsn(CASTORE);
        Label l26 = new Label();
        method.visitLabel(l26);
        method.visitIincInsn(6, 1);
        method.visitLabel(l24);
        method.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
        method.visitVarInsn(ILOAD, 6);
        method.visitVarInsn(ALOAD, 3);
        method.visitInsn(ARRAYLENGTH);
        method.visitJumpInsn(IF_ICMPLT, l25);
        Label l27 = new Label();
        method.visitLabel(l27);
        method.visitVarInsn(ALOAD, 5);
        method.visitInsn(ARRAYLENGTH);
        method.visitIntInsn(SIPUSH, 256);
        method.visitInsn(ISHL);
        method.visitIntInsn(NEWARRAY, T_CHAR);
        method.visitVarInsn(ASTORE, 6);
        Label l28 = new Label();
        method.visitLabel(l28);
        method.visitInsn(ICONST_0);
        method.visitVarInsn(ISTORE, 7);
        Label l29 = new Label();
        method.visitLabel(l29);
        Label l30 = new Label();
        method.visitJumpInsn(GOTO, l30);
        Label l31 = new Label();
        method.visitLabel(l31);
        method.visitFrame(Opcodes.F_FULL, 8, new Object[]{"java/lang/String", "java/lang/String", "[I", "[C", "[C", "[C", "[C", Opcodes.INTEGER}, 0, new Object[]{});
        method.visitVarInsn(ALOAD, 6);
        method.visitVarInsn(ILOAD, 7);
        method.visitIntInsn(SIPUSH, 256);
        method.visitInsn(ISHL);
        method.visitVarInsn(ALOAD, 5);
        method.visitVarInsn(ILOAD, 7);
        method.visitIntInsn(SIPUSH, 256);
        method.visitInsn(ISHL);
        method.visitInsn(CALOAD);
        method.visitVarInsn(ALOAD, 4);
        method.visitVarInsn(ILOAD, 7);
        method.visitIntInsn(SIPUSH, 256);
        method.visitInsn(ISHL);
        method.visitVarInsn(ALOAD, 4);
        method.visitInsn(ARRAYLENGTH);
        method.visitIntInsn(SIPUSH, 256);
        method.visitInsn(ISHL);
        method.visitInsn(IREM);
        method.visitInsn(CALOAD);
        method.visitInsn(IXOR);
        method.visitInsn(I2C);
        method.visitInsn(CASTORE);
        Label l32 = new Label();
        method.visitLabel(l32);
        method.visitIincInsn(7, 1);
        method.visitLabel(l30);
        method.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
        method.visitVarInsn(ILOAD, 7);
        method.visitVarInsn(ALOAD, 5);
        method.visitInsn(ARRAYLENGTH);
        method.visitJumpInsn(IF_ICMPLT, l31);
        Label l33 = new Label();
        method.visitLabel(l33);
        method.visitTypeInsn(NEW, "java/lang/String");
        method.visitInsn(DUP);
        method.visitVarInsn(ALOAD, 6);
        method.visitMethodInsn(INVOKESPECIAL, "java/lang/String", "<init>", "([C)V", false);
        method.visitVarInsn(ASTORE, 7);
        Label l34 = new Label();
        method.visitLabel(l34);
        method.visitTypeInsn(NEW, "java/lang/String");
        method.visitInsn(DUP);
        method.visitVarInsn(ALOAD, 7);
        method.visitMethodInsn(INVOKESPECIAL, "java/lang/String", "<init>", "(Ljava/lang/String;)V", false);
        method.visitLabel(l1);
        method.visitInsn(ARETURN);
        method.visitLabel(l2);
        method.visitFrame(Opcodes.F_FULL, 2, new Object[]{"java/lang/String", "java/lang/String"}, 1, new Object[]{"java/lang/Throwable"});
        method.visitVarInsn(ASTORE, 2);
        Label l35 = new Label();
        method.visitLabel(l35);
        method.visitVarInsn(ALOAD, 0);
        method.visitInsn(ARETURN);
        Label l36 = new Label();
        method.visitLabel(l36);
        method.visitMaxs(7, 8);
        method.visitEnd();

        return method;
    }

    /**
     * Returns a {@link MethodNode} that returns a {@link String} needed to decrypt strings encrypted by {@link NormalStringEncryption}.
     *
     * @param decryptionMethodName used to determine the name of the generated {@link MethodNode}.
     * @return a {@link MethodNode} that returns a {@link String} needed to decrypt strings encrypted by {@link NormalStringEncryption}.
     */
    public static MethodNode normalMethod(String decryptionMethodName) {
        MethodNode methodNode = new MethodNode(ACC_PUBLIC + ACC_STATIC + ACC_SYNTHETIC + ACC_BRIDGE, decryptionMethodName, "(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;", null, null);
        methodNode.visitCode();
        Label l0 = new Label();
        Label l1 = new Label();
        Label l2 = new Label();
        methodNode.visitTryCatchBlock(l0, l1, l2, "java/lang/Throwable");
        methodNode.visitLabel(l0);
        methodNode.visitInsn(ACONST_NULL);
        methodNode.visitVarInsn(ASTORE, 4);
        Label l3 = new Label();
        methodNode.visitLabel(l3);
        methodNode.visitVarInsn(ALOAD, 1);
        methodNode.visitLdcInsn("UTF-8");
        methodNode.visitMethodInsn(INVOKEVIRTUAL, "java/lang/String", "getBytes", "(Ljava/lang/String;)[B", false);
        methodNode.visitVarInsn(ASTORE, 3);
        Label l4 = new Label();
        methodNode.visitLabel(l4);
        methodNode.visitLdcInsn("SHA-256");
        methodNode.visitMethodInsn(INVOKESTATIC, "java/security/MessageDigest", "getInstance", "(Ljava/lang/String;)Ljava/security/MessageDigest;", false);
        methodNode.visitVarInsn(ASTORE, 4);
        Label l5 = new Label();
        methodNode.visitLabel(l5);
        methodNode.visitVarInsn(ALOAD, 4);
        methodNode.visitVarInsn(ALOAD, 3);
        methodNode.visitMethodInsn(INVOKEVIRTUAL, "java/security/MessageDigest", "digest", "([B)[B", false);
        methodNode.visitVarInsn(ASTORE, 3);
        Label l6 = new Label();
        methodNode.visitLabel(l6);
        methodNode.visitVarInsn(ALOAD, 3);
        methodNode.visitIntInsn(BIPUSH, 16);
        methodNode.visitMethodInsn(INVOKESTATIC, "java/util/Arrays", "copyOf", "([BI)[B", false);
        methodNode.visitVarInsn(ASTORE, 3);
        Label l7 = new Label();
        methodNode.visitLabel(l7);
        methodNode.visitTypeInsn(NEW, "javax/crypto/spec/SecretKeySpec");
        methodNode.visitInsn(DUP);
        methodNode.visitVarInsn(ALOAD, 3);
        methodNode.visitLdcInsn("AES");
        methodNode.visitMethodInsn(INVOKESPECIAL, "javax/crypto/spec/SecretKeySpec", "<init>", "([BLjava/lang/String;)V", false);
        methodNode.visitVarInsn(ASTORE, 2);
        Label l8 = new Label();
        methodNode.visitLabel(l8);
        methodNode.visitLdcInsn("AES/ECB/PKCS5PADDING");
        methodNode.visitMethodInsn(INVOKESTATIC, "javax/crypto/Cipher", "getInstance", "(Ljava/lang/String;)Ljavax/crypto/Cipher;", false);
        methodNode.visitVarInsn(ASTORE, 5);
        Label l9 = new Label();
        methodNode.visitLabel(l9);
        methodNode.visitVarInsn(ALOAD, 5);
        methodNode.visitInsn(ICONST_2);
        methodNode.visitVarInsn(ALOAD, 2);
        methodNode.visitMethodInsn(INVOKEVIRTUAL, "javax/crypto/Cipher", "init", "(ILjava/security/Key;)V", false);
        Label l10 = new Label();
        methodNode.visitLabel(l10);
        methodNode.visitTypeInsn(NEW, "java/lang/String");
        methodNode.visitInsn(DUP);
        methodNode.visitVarInsn(ALOAD, 5);
        methodNode.visitMethodInsn(INVOKESTATIC, "java/util/Base64", "getDecoder", "()Ljava/util/Base64$Decoder;", false);
        methodNode.visitVarInsn(ALOAD, 0);
        methodNode.visitMethodInsn(INVOKEVIRTUAL, "java/util/Base64$Decoder", "decode", "(Ljava/lang/String;)[B", false);
        methodNode.visitMethodInsn(INVOKEVIRTUAL, "javax/crypto/Cipher", "doFinal", "([B)[B", false);
        methodNode.visitMethodInsn(INVOKESPECIAL, "java/lang/String", "<init>", "([B)V", false);
        methodNode.visitLabel(l1);
        methodNode.visitInsn(ARETURN);
        methodNode.visitLabel(l2);
        methodNode.visitFrame(Opcodes.F_SAME1, 0, null, 1, new Object[]{"java/lang/Throwable"});
        methodNode.visitVarInsn(ASTORE, 2);
        Label l11 = new Label();
        methodNode.visitLabel(l11);
        methodNode.visitInsn(ACONST_NULL);
        methodNode.visitInsn(ARETURN);
        Label l12 = new Label();
        methodNode.visitLabel(l12);
        methodNode.visitMaxs(5, 6);
        methodNode.visitEnd();

        return methodNode;
    }
}
